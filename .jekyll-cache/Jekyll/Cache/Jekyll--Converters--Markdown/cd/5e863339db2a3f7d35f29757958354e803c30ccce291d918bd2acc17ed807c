I"·-<p>Every year in our household we hold a ‚ÄúSecret Maccabee‚Äù gift exchange. And, while it‚Äôs not hard to manually arrange the pairings for our small family, it is tedious to do it every year (and way more fun to do it with code). Plus, by sharing this code with you here, maybe I can save some large 50 person family from headache!</p>

<p>The goal is simple: Randomly match each person participating in the gift exchange with another person. The kicker in our family is that we want to always make sure that no one is matched with someone in their inner circle (i.e. no father-daughter, sibling, or in-law matchups).</p>

<p>I‚Äôve chosen to tackle this problem with the R language for two reasons. First, because it is what I‚Äôm comfortable with and second, because it‚Äôs open source for anyone that wants to utilize my code. If you just want to skip the description you can find the script here. That said, let‚Äôs see how this beautiful, brief, script works!</p>

<p>The first few lines are dedicated to loading in the required packages and building a dataset. The dataset could be imported much more efficiently using a flat file but I‚Äôve built it this way to show what is happening. The last 14 or so lines do all the heavy lifting.</p>

<div class="language-R highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#### Import Libraries ####</span><span class="w">
</span><span class="n">library</span><span class="p">(</span><span class="n">dplyr</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Declare Families and their Members #####</span><span class="w">
</span><span class="n">family1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Person1"</span><span class="p">,</span><span class="s2">"Person2"</span><span class="p">,</span><span class="s2">"Person3"</span><span class="p">,</span><span class="s2">"Person4"</span><span class="p">,</span><span class="s2">"Person5"</span><span class="p">,</span><span class="s2">"Person6"</span><span class="p">)</span><span class="w">
</span><span class="n">family2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Person7"</span><span class="p">,</span><span class="s2">"Person8"</span><span class="p">)</span><span class="w">
</span><span class="n">family3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Person9"</span><span class="p">)</span><span class="w">
</span><span class="n">family4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="s2">"Person10"</span><span class="p">,</span><span class="s2">"Person11"</span><span class="p">,</span><span class="s2">"Person12"</span><span class="p">,</span><span class="s2">"Person13"</span><span class="p">,</span><span class="s2">"Person14"</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Combine Families Together In One Dataset ####</span><span class="w">
</span><span class="n">f1</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">person</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">family1</span><span class="p">,</span><span class="w"> </span><span class="n">family</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"family1"</span><span class="p">)</span><span class="w">
</span><span class="n">f2</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">family2</span><span class="p">,</span><span class="w"> </span><span class="s2">"family2"</span><span class="p">)</span><span class="w">
</span><span class="n">f3</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">family3</span><span class="p">,</span><span class="w"> </span><span class="s2">"family3"</span><span class="p">)</span><span class="w">
</span><span class="n">f4</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">cbind</span><span class="p">(</span><span class="n">family4</span><span class="p">,</span><span class="w"> </span><span class="s2">"family4"</span><span class="p">)</span><span class="w">
</span><span class="n">participants</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">as.data.frame</span><span class="p">(</span><span class="n">rbind</span><span class="p">(</span><span class="n">f1</span><span class="p">,</span><span class="n">f2</span><span class="p">,</span><span class="n">f3</span><span class="p">,</span><span class="n">f4</span><span class="p">))</span><span class="w">

</span><span class="c1">#### Recode Columns As Character Data Types ####</span><span class="w">
</span><span class="n">participants</span><span class="o">$</span><span class="n">person</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">participants</span><span class="o">$</span><span class="n">person</span><span class="p">)</span><span class="w">
</span><span class="n">participants</span><span class="o">$</span><span class="n">family</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">as.character</span><span class="p">(</span><span class="n">participants</span><span class="o">$</span><span class="n">family</span><span class="p">)</span><span class="w">

</span><span class="c1">#### Create An Empty Vector To Hold The Matches ####</span><span class="w">
</span><span class="n">successfulMatch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">"character"</span><span class="p">)</span><span class="w">

</span><span class="c1"># Check to see if the successfulMatch list is the same length as the participants list so that everyone is matched.</span><span class="w">
</span><span class="k">while</span><span class="w"> </span><span class="p">(</span><span class="nf">length</span><span class="p">(</span><span class="n">successfulMatch</span><span class="p">)</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">nrow</span><span class="p">(</span><span class="n">participants</span><span class="p">))</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="c1"># Recreate the empty vector if the previous pass didn't work</span><span class="w">
  </span><span class="n">successfulMatch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="n">vector</span><span class="p">(</span><span class="n">mode</span><span class="o">=</span><span class="s2">"character"</span><span class="p">)</span><span class="w">
  
  </span><span class="c1">#Loop through all participants</span><span class="w">
  </span><span class="k">for</span><span class="w"> </span><span class="p">(</span><span class="n">i</span><span class="w"> </span><span class="k">in</span><span class="w"> </span><span class="m">1</span><span class="o">:</span><span class="n">nrow</span><span class="p">(</span><span class="n">participants</span><span class="p">)){</span><span class="w">
    </span><span class="c1">#Gather the participants who have not been chosen and are not in the same family as the current participant</span><span class="w">
    </span><span class="n">availableMatches</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> 
      </span><span class="n">participants</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">filter</span><span class="p">(</span><span class="n">family</span><span class="w"> </span><span class="o">!=</span><span class="w"> </span><span class="n">participants</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="m">2</span><span class="p">])</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">filter</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">person</span><span class="w"> </span><span class="o">%in%</span><span class="w"> </span><span class="n">successfulMatch</span><span class="p">))</span><span class="w"> </span><span class="o">%&gt;%</span><span class="w">
      </span><span class="n">select</span><span class="p">(</span><span class="n">person</span><span class="p">)</span><span class="w">
    </span><span class="c1">#Randomly choose an available participant and add them to the successfulMatch vector</span><span class="w">
    </span><span class="n">successfulMatch</span><span class="w"> </span><span class="o">&lt;-</span><span class="w"> </span><span class="nf">c</span><span class="p">(</span><span class="n">successfulMatch</span><span class="p">,</span><span class="w">
                         </span><span class="n">availableMatches</span><span class="p">[</span><span class="n">sample</span><span class="p">(</span><span class="n">nrow</span><span class="p">(</span><span class="n">availableMatches</span><span class="p">),</span><span class="n">size</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="m">1</span><span class="p">),</span><span class="m">1</span><span class="p">])</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="c1">#### Print Results ####</span><span class="w">
</span><span class="n">print</span><span class="p">(</span><span class="n">cbind</span><span class="p">(</span><span class="n">participants</span><span class="p">,</span><span class="n">recipient</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">successfulMatch</span><span class="p">))</span><span class="w">
</span></code></pre></div></div>

<p>And that‚Äôs all there is to it! In essentially 13 lines of code, I have eased the woes of secret maccabee organizers for the foreseeable future. That said, there are undoubtedly improvements to be made.</p>

<p>For instance, as I am using random numbers to select participants and families are not all the same size, sometimes I get a list where not everyone recieves a gift. I‚Äôve avoided this by re-running the selection process until the number of recipients matches the number of gifters (using the <code class="language-plaintext highlighter-rouge">while()</code> loop above). I‚Äôve also used the <code class="language-plaintext highlighter-rouge">dplyr</code> package to make the code more human-readible even though all functions could be performed using base R. Lastly, the process is still very manual as everytime a new family is made (marriage), or a family member enters or leaves (kids, divorce, etc.) I will need to update the data creation step.</p>

<p>For now though, this process fits my need perfectly and I hope you can find some use in it as well! As always, feel free to reach out on GitHub or LinkedIn should you have any questions.</p>

<p>Until next time! üôã‚Äç‚ôÇÔ∏èüìà</p>
:ET